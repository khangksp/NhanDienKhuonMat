import cv2
import numpy as np
import tensorflow as tf
import json
import time
from tensorflow.keras.models import load_model

# ·∫®n log kh√¥ng c·∫ßn thi·∫øt c·ªßa TensorFlow
tf.get_logger().setLevel('ERROR')

# Load m√¥ h√¨nh CNN
model = load_model("models/cnn_face_recognition.h5")

# Load b·ªô ph√°t hi·ªán khu√¥n m·∫∑t
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Load √°nh x·∫° ID -> M√£ sinh vi√™n
with open("labels.json", "r", encoding="utf-8") as f:
    id_to_name = json.load(f)

# ƒê·ªãnh k√≠ch th∆∞·ªõc ·∫£nh ƒë·∫ßu v√†o
IMG_SIZE = (66, 66)
CONFIDENCE_THRESHOLD = 0.7  # Ng∆∞·ª°ng tin c·∫≠y ƒë·ªÉ x√°c ƒë·ªãnh ng∆∞·ªùi quen

# Bi·∫øn ƒë·ªÉ ki·ªÉm so√°t hi·ªÉn th·ªã th√¥ng tin trong 3 gi√¢y
last_detected = None
display_until = 0

# Kh·ªüi ƒë·ªông webcam
cap = cv2.VideoCapture(0)
print("üîç ƒêang ch·∫°y nh·∫≠n di·ªán khu√¥n m·∫∑t...")

while True:
    ret, frame = cap.read()
    if not ret:
        print("L·ªói ƒë·ªçc camera.")
        break

    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))
    
    detected = False

    for (x, y, w, h) in faces:
        face_roi = cv2.resize(gray[y:y+h, x:x+w], IMG_SIZE)
        face_roi = np.expand_dims(face_roi, axis=-1)  # Th√™m k√™nh m√†u x√°m
        face_roi = np.expand_dims(face_roi, axis=0)  # Th√™m batch dimension
        face_roi = face_roi / 255.0  # Chu·∫©n h√≥a d·ªØ li·ªáu
        
        # D·ª± ƒëo√°n nh√£n v√† ƒë·ªô tin c·∫≠y
        predictions = model.predict(face_roi, verbose=0)  
        predicted_label = np.argmax(predictions)
        confidence = np.max(predictions)  # X√°c su·∫•t cao nh·∫•t c·ªßa d·ª± ƒëo√°n
        
        # Ki·ªÉm tra n·∫øu ƒë·ªô tin c·∫≠y ƒë·ªß cao
        if confidence >= CONFIDENCE_THRESHOLD:
            student_id = id_to_name.get(str(predicted_label), None)
        else:
            student_id = None  # Kh√¥ng x√°c ƒë·ªãnh ng∆∞·ªùi l·∫°

        if student_id:
            detected = True
            if student_id != last_detected:
                last_detected = student_id
                display_until = time.time() + 3  # Hi·ªÉn th·ªã trong 3 gi√¢y
            
            if time.time() < display_until:
                cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)
                cv2.putText(frame, student_id, (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2)
    
    # N·∫øu kh√¥ng c√≥ khu√¥n m·∫∑t ƒë∆∞·ª£c nh·∫≠n di·ªán, reset hi·ªÉn th·ªã
    if not detected:
        last_detected = None

    cv2.imshow("Face Recognition", frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
